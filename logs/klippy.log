===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_350043001450335331383520-if00
restart_method = command

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[neopixel sb_leds]
pin = PB0
chain_count = 3
color_order = GRB
initial_red = 0.90
initial_green = 0.90
initial_blue = 0.90

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 4000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 1.506

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = PE2
dir_pin = !PE3
enable_pin = !PD4
rotation_distance = 10.82496272218452
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = PA2
sensor_type = Generic 3950
sensor_pin = PF4
min_temp = 10
max_temp = 290
max_power = 1.0
min_extrude_temp = 170
pressure_advance = 0.04
control = pid
pid_kp = 30.675
pid_ki = 1.401
pid_kd = 167.944

[tmc2209 extruder]
uart_pin = PE1
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = 0
max_temp = 120
control = pid
pid_kp = 39.380
pid_ki = 1.346
pid_kd = 287.968

[probe]
pin = PG15
x_offset = 0
y_offset = 19.75
z_offset = 5.745
speed = 5
samples = 3
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.02
samples_tolerance_retries = 3

[fan]
pin = PA8
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = PE5
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[controller_fan controller_fan]
pin = PD12
kick_start_time = 0.5
max_power = 0.5
heater = heater_bed

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 100
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[gcode_macro _User_Variables]
variable_verbose = True
variable_debug = False
variable_travel_speed = 200
variable_move_accel = 1000
variable_dock_speed = 20
variable_release_speed = 75
variable_z_drop_speed = 20
variable_safe_z = 25
variable_enable_z_hop = True
variable_max_bed_y = 350
variable_max_bed_x = 350
variable_z_endstop_x = 0
variable_z_endstop_y = 0
variable_docklocation_x = 43.1
variable_docklocation_y = 346.7
variable_docklocation_z = -128
variable_enable_dock_servo = False
variable_servo_name = 'NAME'
variable_servo_deploy = 10
variable_servo_retract = 11
variable_servo_delay = 250
variable_dockmove_x = 40
variable_dockmove_y = 0
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
variable_home_backoff_x = 10
variable_home_backoff_y = 10
variable_override_homing = ''
variable_dock_on_zhome = True
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	
	
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	
	
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _KlickyDebug]
gcode = 
	{% set message  = params.MSG %}
	{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}
	
	{% if debug %}
	{ action_respond_info(message) }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}
	
	
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	
	M400
	SAVE_GCODE_STATE NAME={function}
	
	SET_GCODE_OFFSET Z=0
	
	G90
	
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _DeployKlickyDock]
description = Deploys Klicky servo-controlled dock
gcode = 
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}
	
	
	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"
	{% if servo_deploy == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }
	{% endif %}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _DeployDock"] is defined %}
	_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"
	_DeployDock
	{% endif %}

[gcode_macro _RetractKlickyDock]
description = Retracts Klicky servo-controlled dock
gcode = 
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}
	
	
	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"
	{% if servo_retract == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
	{% endif %}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _RetractDock"] is defined %}
	_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"
	_RetractDock
	{% endif %}

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	
	{% set goback  = params.BACK|default(0) %}
	
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	
	
	_entry_point function=Attach_Probe
	
	{% if bypass_probe_docking == False %}
	
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	_KlickyDebug msg="Attach_Probe Axis homed"
	
	
	{% elif not probe_attached and not probe_lock %}
	_KlickyDebug msg="Attach_Probe going to attach probe"
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	_KlickyDebug msg="Attach_Probe z_hop disabled"
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	
	
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero, duplicate?") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Umbilical_Path
	
	_entry_point function=Attach_Probe_intern
	
	
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	
	
	_DeployKlickyDock
	
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	
	
	_RetractKlickyDock
	
	
	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Park_Toolhead
	
	_CheckProbe action=attach
	
	_exit_point function=Attach_Probe_intern move={goback}
	_KLICKY_STATUS_READY
	
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	
	
	_KlickyDebug msg="Attach_Probe probe locked not attaching probe"
	_CheckProbe action=query
	
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	
	
	_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"
	_CheckProbe action=query
	
	{% endif %}
	
	_exit_point function=Attach_Probe
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	
	{% set goback  = params.BACK|default(0) %}
	
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	{% if bypass_probe_docking == False %}
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}
	
	
	{% if bypass_probe_docking == False %}
	_entry_point function=Dock_Probe
	
	
	{% if probe_attached and not probe_lock %}
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% endif %}
	_KlickyDebug msg="Dock_Probe Axis homed"
	_KlickyDebug msg="Dock_Probe going to dock probe"
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Umbilical_Path
	
	
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	
	
	_DeployKlickyDock
	
	
	_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	
	
	_RetractKlickyDock
	
	
	_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	
	
	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Park_Toolhead
	
	G4 P1000
	_CheckProbe action=dock
	_KLICKY_STATUS_READY
	
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	
	
	_KlickyDebug msg="Dock_Probe probe locked not docking probe"
	_CheckProbe action=query
	
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	
	
	_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"
	_CheckProbe action=query
	
	{% endif %}
	
	_exit_point function=Dock_Probe move={goback}
	{% else %}
	_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_calibrate Axis homed"
	_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
	
	
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
	{% endif %}
	
	{% if bypass_probe_docking == False %}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_KLICKY_STATUS_CALIBRATING_Z
	
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	M118 moving the toolhead 20 mm from the bed
	_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"
	TESTZ Z=20
	M118 remove manually the probe and continue calibration
	_KLICKY_STATUS_READY
	{% else %}
	_KLICKY_STATUS_CALIBRATING_Z
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	_KLICKY_STATUS_READY
	{% endif %}

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_accuracy Axis homed"
	_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
	
	_entry_point function=PROBE_ACCURACY
	
	
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
	{% endif%}
	
	_CheckProbe action=query
	Attach_Probe back=1
	
	_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	Dock_Probe back=1
	
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set kinematic_z = 0 %}
	{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}
	{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}
	{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default('') %}
	
	
	_klicky_check_variables_version
	
	_CheckProbe action=query
	
	
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	
	
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	
	{% set home_x, home_y, home_z = True, True, True %}
	_KlickyDebug msg="homing_override goint to home all axes"
	
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	_KlickyDebug msg="homing_override goint to home X"
	
	{% endif %}
	
	{% if 'Y' in params %}
	{% set home_y = True %}
	_KlickyDebug msg="homing_override goint to home Y"
	{% endif %}
	
	{% if 'Z' in params %}
	{% set home_z = True %}
	_KlickyDebug msg="homing_override goint to home Z"
	{% endif %}
	
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	
	
	_Homing_Variables reset=1
	_KlickyDebug msg="homing_override goint to home all axes"
	{% endif %}
	
	{% endif %}
	
	_entry_point function=homing_override
	_KLICKY_STATUS_HOMING
	
	
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	_KlickyDebug msg="homing_override z_hop disabled"
	
	{% set kinematic_z = safe_z %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	
	
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("No axis homed") }
	{% endif %}
	_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"
	SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
	M400
	_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	_KlickyDebug msg="homing_override clearing axis homed state"
	M84
	{% endif %}
	
	{% if home_z %}
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("X or Y not homed, forcing full G28") }
	{% endif %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	
	
	{% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
	
	{% if home_y %}
	{% if override_homing == 'Y' %}
	_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"
	{% else %}
	_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"
	{% endif %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y G28 Y0"
	G28 Y0
	
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	
	
	
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"
	_HOME_X
	{% else %}
	_KlickyDebug msg="homing_override Homing X, G28 X0"
	G28 X0
	
	{% if home_backoff_x != 0 %}
	{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	
	
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y, G28 Y0"
	G28 Y0
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	
	
	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"
	Attach_Probe
	
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% elif dock_on_zhome == True %}
	Dock_Probe
	{% endif %}
	
	_Home_Z
	
	
	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe no longer required, docking probe"
	Dock_Probe
	{% elif dock_on_zhome == False %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	
	
	_Park_Toolhead
	
	_exit_point function=homing_override
	_KLICKY_STATUS_READY

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	
	{% if umbilical %}
	
	_entry_point function=Umbilical_Path
	
	_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	_entry_point function=Home_Z
	
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	_KlickyDebug msg="_Home_Z XY Axis homed"
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="_Home_Z Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	
	
	
	_KlickyDebug msg="_Home_Z moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	_KlickyDebug msg="_Home_Z Homing Z G28 Z"
	G28 Z0
	_KlickyDebug msg="_Home_Z toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	
	
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	
	
	
	
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	
	
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	_entry_point function=Park_Toolhead
	
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	{% if parkposition_z == -128 %}
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_} F{travel_feedrate}
	
	{% else %}
	
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	
	{% endif %}
	
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro _klicky_status_ready]
gcode = 
	{% if printer['gcode_macro status_ready'] is defined %}
	_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
	STATUS_READY
	{% endif %}

[gcode_macro _klicky_status_busy]
gcode = 
	{% if printer['gcode_macro status_busy'] is defined %}
	_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"
	STATUS_BUSY
	{% endif %}

[gcode_macro _klicky_status_leveling]
gcode = 
	{% if printer['gcode_macro status_leveling'] is defined %}
	_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"
	STATUS_LEVELING
	{% endif %}

[gcode_macro _klicky_status_homing]
gcode = 
	{% if printer['gcode_macro status_homing'] is defined %}
	_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"
	STATUS_HOMING
	{% endif %}

[gcode_macro _klicky_status_cleaning]
gcode = 
	{% if printer['gcode_macro status_cleaning'] is defined %}
	_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"
	STATUS_CLEANING
	{% endif %}

[gcode_macro _klicky_status_meshing]
gcode = 
	{% if printer['gcode_macro status_meshing'] is defined %}
	_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"
	STATUS_MESHING
	{% endif %}

[gcode_macro _klicky_status_calibrating_z]
gcode = 
	{% if printer['gcode_macro status_calibrating_z'] is defined %}
	_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"
	STATUS_CALIBRATING_Z
	{% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
description = Perform Mesh Bed Leveling with klicky automount
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Bed Mesh Calibrate") }
	{% endif %}
	
	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_MESHING
	
	_BED_MESH_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	Dock_Probe

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = _QUAD_GANTRY_LEVEL
description = Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("QG Level") }
	{% endif %}
	
	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_LEVELING
	
	_QUAD_GANTRY_LEVEL {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	G28
	QUAD_GANTRY_LEVEL
	G28
	
	
	
	
	
	
	
	
	
	G0 X175 Y175 Z30 F3600
	
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	G32
	G90
	G1 Z20 F3000
	QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 310,310
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
algorithm = bicubic
relative_reference_index = 24

[mcu rpi]
serial = /tmp/klipper_host_mcu

[adxl345]
cs_pin = rpi:None

[resonance_tester]
accel_chip = adxl345
probe_points = 
	175, 175, 20

[input_shaper]
shaper_freq_x = 64.8
shaper_type_x = 2hump_ei
shaper_freq_y = 40.
shaper_type_y = mzv

[bed_mesh test2]
version = 1
points = 
	-0.031250, -0.028750, -0.006250, -0.007500, -0.021250, -0.037500, -0.027500
	-0.030000, -0.031250, -0.013750, -0.008750, -0.030000, -0.042500, -0.032500
	-0.030000, -0.028750, -0.010000, -0.006250, -0.023750, -0.038750, -0.027500
	-0.010000, -0.011250, -0.000000, 0.000000, -0.011250, -0.023750, -0.013750
	-0.018750, -0.023750, -0.010000, -0.007500, -0.022500, -0.036250, -0.030000
	-0.027500, -0.026250, -0.022500, -0.016250, -0.027500, -0.037500, -0.032500
	-0.040000, -0.036250, -0.031250, -0.021250, -0.028750, -0.042500, -0.038750
x_count = 7
y_count = 7
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 40.0
max_x = 310.0
min_y = 40.0
max_y = 310.0

[bed_mesh default]
version = 1
points = 
	-0.123750, -0.121250, -0.101250, -0.096250, -0.113750, -0.127500, -0.120000
	-0.097500, -0.093750, -0.081250, -0.080000, -0.100000, -0.117500, -0.110000
	-0.080000, -0.072500, -0.056250, -0.045000, -0.072500, -0.081250, -0.071250
	-0.026250, -0.023750, -0.013750, 0.000000, -0.027500, -0.048750, -0.048750
	-0.042500, -0.038750, -0.020000, -0.015000, -0.027500, -0.040000, -0.040000
	-0.038750, -0.041250, -0.033750, -0.026250, -0.038750, -0.052500, -0.046250
	-0.042500, -0.058750, -0.046250, -0.035000, -0.043750, -0.051250, -0.043750
x_count = 7
y_count = 7
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 40.0
max_x = 310.0
min_y = 40.0
max_y = 310.0
=======================
Loaded MCU 'mcu' 117 commands (v0.11.0-121-ga5fb2076 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_sdio=PC12,PD2,PC8,PC9,PC10,PC11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 CLOCK_FREQ=180000000 MCU=stm32f446xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Loaded MCU 'rpi' 111 commands (v0.11.0-121-ga5fb2076 / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'rpi' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Configured MCU 'rpi' (1024 moves)
toolhead: max_velocity: 300.000000
max_accel: 4000.000000
max_accel_to_decel: 2000.000000
square_corner_velocity: 5.000000
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-128-g57c4da5e'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
=============== Log rollover at Sun Mar 19 04:25:19 2023 ===============
webhooks client 547620086976: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-l', '/home/pi/printer_data/logs/klippy.log', '-I', '/home/pi/printer_data/comms/klippy.serial', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-128-g57c4da5e'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Sun Mar 19 04:25:39 2023 (1679199939.5 25.5)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_350043001450335331383520-if00
restart_method = command

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set allow_park = False if not macro_found
	else False if client.park_at_cancel is not defined
	else True  if client.park_at_cancel|lower == 'true'
	else False %}
	{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_x is not defined
	else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
	{% set park_y = ""                                    if not macro_found
	else ""                                    if client.park_at_cancel_y is not defined
	else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
	{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
	
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
	
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[neopixel sb_leds]
pin = PB0
chain_count = 3
color_order = GRB
initial_red = 0.90
initial_green = 0.90
initial_blue = 0.90

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 4000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 1.506

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = PE2
dir_pin = !PE3
enable_pin = !PD4
rotation_distance = 10.82496272218452
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = PA2
sensor_type = Generic 3950
sensor_pin = PF4
min_temp = 10
max_temp = 290
max_power = 1.0
min_extrude_temp = 170
pressure_advance = 0.04
control = pid
pid_kp = 30.675
pid_ki = 1.401
pid_kd = 167.944

[tmc2209 extruder]
uart_pin = PE1
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = 0
max_temp = 120
control = pid
pid_kp = 39.380
pid_ki = 1.346
pid_kd = 287.968

[probe]
pin = PG15
x_offset = 0
y_offset = 19.75
z_offset = 5.745
speed = 5
samples = 3
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.02
samples_tolerance_retries = 3

[fan]
pin = PA8
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = PE5
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[controller_fan controller_fan]
pin = PD12
kick_start_time = 0.5
max_power = 0.5
heater = heater_bed

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 100
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[gcode_macro _User_Variables]
variable_verbose = True
variable_debug = False
variable_travel_speed = 200
variable_move_accel = 1000
variable_dock_speed = 20
variable_release_speed = 75
variable_z_drop_speed = 20
variable_safe_z = 25
variable_enable_z_hop = True
variable_max_bed_y = 350
variable_max_bed_x = 350
variable_z_endstop_x = 0
variable_z_endstop_y = 0
variable_docklocation_x = 43.1
variable_docklocation_y = 346.7
variable_docklocation_z = -128
variable_enable_dock_servo = False
variable_servo_name = 'NAME'
variable_servo_deploy = 10
variable_servo_retract = 11
variable_servo_delay = 250
variable_dockmove_x = 40
variable_dockmove_y = 0
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
variable_home_backoff_x = 10
variable_home_backoff_y = 10
variable_override_homing = ''
variable_dock_on_zhome = True
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	
	
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	
	
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _KlickyDebug]
gcode = 
	{% set message  = params.MSG %}
	{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}
	
	{% if debug %}
	{ action_respond_info(message) }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}
	
	
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	
	M400
	SAVE_GCODE_STATE NAME={function}
	
	SET_GCODE_OFFSET Z=0
	
	G90
	
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _DeployKlickyDock]
description = Deploys Klicky servo-controlled dock
gcode = 
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}
	
	
	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"
	{% if servo_deploy == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }
	{% endif %}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _DeployDock"] is defined %}
	_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"
	_DeployDock
	{% endif %}

[gcode_macro _RetractKlickyDock]
description = Retracts Klicky servo-controlled dock
gcode = 
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}
	
	
	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"
	{% if servo_retract == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
	{% endif %}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _RetractDock"] is defined %}
	_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"
	_RetractDock
	{% endif %}

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	
	{% set goback  = params.BACK|default(0) %}
	
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	
	
	_entry_point function=Attach_Probe
	
	{% if bypass_probe_docking == False %}
	
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	_KlickyDebug msg="Attach_Probe Axis homed"
	
	
	{% elif not probe_attached and not probe_lock %}
	_KlickyDebug msg="Attach_Probe going to attach probe"
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	_KlickyDebug msg="Attach_Probe z_hop disabled"
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	
	
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero, duplicate?") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Umbilical_Path
	
	_entry_point function=Attach_Probe_intern
	
	
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	
	
	_DeployKlickyDock
	
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	
	
	_RetractKlickyDock
	
	
	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Park_Toolhead
	
	_CheckProbe action=attach
	
	_exit_point function=Attach_Probe_intern move={goback}
	_KLICKY_STATUS_READY
	
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	
	
	_KlickyDebug msg="Attach_Probe probe locked not attaching probe"
	_CheckProbe action=query
	
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	
	
	_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"
	_CheckProbe action=query
	
	{% endif %}
	
	_exit_point function=Attach_Probe
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	
	{% set goback  = params.BACK|default(0) %}
	
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	{% if bypass_probe_docking == False %}
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}
	
	
	{% if bypass_probe_docking == False %}
	_entry_point function=Dock_Probe
	
	
	{% if probe_attached and not probe_lock %}
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% endif %}
	_KlickyDebug msg="Dock_Probe Axis homed"
	_KlickyDebug msg="Dock_Probe going to dock probe"
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY
	
	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Umbilical_Path
	
	
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	
	
	_DeployKlickyDock
	
	
	_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	
	
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	
	
	_RetractKlickyDock
	
	
	_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	
	
	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_Park_Toolhead
	
	G4 P1000
	_CheckProbe action=dock
	_KLICKY_STATUS_READY
	
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	
	
	_KlickyDebug msg="Dock_Probe probe locked not docking probe"
	_CheckProbe action=query
	
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	
	
	_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"
	_CheckProbe action=query
	
	{% endif %}
	
	_exit_point function=Dock_Probe move={goback}
	{% else %}
	_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_calibrate Axis homed"
	_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
	
	
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
	{% endif %}
	
	{% if bypass_probe_docking == False %}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_KLICKY_STATUS_CALIBRATING_Z
	
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	M118 moving the toolhead 20 mm from the bed
	_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"
	TESTZ Z=20
	M118 remove manually the probe and continue calibration
	_KLICKY_STATUS_READY
	{% else %}
	_KLICKY_STATUS_CALIBRATING_Z
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	_KLICKY_STATUS_READY
	{% endif %}

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_accuracy Axis homed"
	_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
	
	_entry_point function=PROBE_ACCURACY
	
	
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
	{% endif%}
	
	_CheckProbe action=query
	Attach_Probe back=1
	
	_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	Dock_Probe back=1
	
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set kinematic_z = 0 %}
	{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}
	{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}
	{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default('') %}
	
	
	_klicky_check_variables_version
	
	_CheckProbe action=query
	
	
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	
	
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	
	{% set home_x, home_y, home_z = True, True, True %}
	_KlickyDebug msg="homing_override goint to home all axes"
	
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	_KlickyDebug msg="homing_override goint to home X"
	
	{% endif %}
	
	{% if 'Y' in params %}
	{% set home_y = True %}
	_KlickyDebug msg="homing_override goint to home Y"
	{% endif %}
	
	{% if 'Z' in params %}
	{% set home_z = True %}
	_KlickyDebug msg="homing_override goint to home Z"
	{% endif %}
	
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	
	
	_Homing_Variables reset=1
	_KlickyDebug msg="homing_override goint to home all axes"
	{% endif %}
	
	{% endif %}
	
	_entry_point function=homing_override
	_KLICKY_STATUS_HOMING
	
	
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	_KlickyDebug msg="homing_override z_hop disabled"
	
	{% set kinematic_z = safe_z %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	
	
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("No axis homed") }
	{% endif %}
	_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"
	SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
	M400
	_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	_KlickyDebug msg="homing_override clearing axis homed state"
	M84
	{% endif %}
	
	{% if home_z %}
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("X or Y not homed, forcing full G28") }
	{% endif %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	
	
	{% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
	
	{% if home_y %}
	{% if override_homing == 'Y' %}
	_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"
	{% else %}
	_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"
	{% endif %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y G28 Y0"
	G28 Y0
	
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	
	
	
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"
	_HOME_X
	{% else %}
	_KlickyDebug msg="homing_override Homing X, G28 X0"
	G28 X0
	
	{% if home_backoff_x != 0 %}
	{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	
	
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y, G28 Y0"
	G28 Y0
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	
	
	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"
	Attach_Probe
	
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% elif dock_on_zhome == True %}
	Dock_Probe
	{% endif %}
	
	_Home_Z
	
	
	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe no longer required, docking probe"
	Dock_Probe
	{% elif dock_on_zhome == False %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	
	
	_Park_Toolhead
	
	_exit_point function=homing_override
	_KLICKY_STATUS_READY

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	
	{% if umbilical %}
	
	_entry_point function=Umbilical_Path
	
	_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	_entry_point function=Home_Z
	
	
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	_KlickyDebug msg="_Home_Z XY Axis homed"
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="_Home_Z Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	
	
	
	_KlickyDebug msg="_Home_Z moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	_KlickyDebug msg="_Home_Z Homing Z G28 Z"
	G28 Z0
	_KlickyDebug msg="_Home_Z toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	
	
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	
	
	
	
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	
	
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	
	_entry_point function=Park_Toolhead
	
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	{% if parkposition_z == -128 %}
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_} F{travel_feedrate}
	
	{% else %}
	
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	
	{% endif %}
	
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro _klicky_status_ready]
gcode = 
	{% if printer['gcode_macro status_ready'] is defined %}
	_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
	STATUS_READY
	{% endif %}

[gcode_macro _klicky_status_busy]
gcode = 
	{% if printer['gcode_macro status_busy'] is defined %}
	_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"
	STATUS_BUSY
	{% endif %}

[gcode_macro _klicky_status_leveling]
gcode = 
	{% if printer['gcode_macro status_leveling'] is defined %}
	_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"
	STATUS_LEVELING
	{% endif %}

[gcode_macro _klicky_status_homing]
gcode = 
	{% if printer['gcode_macro status_homing'] is defined %}
	_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"
	STATUS_HOMING
	{% endif %}

[gcode_macro _klicky_status_cleaning]
gcode = 
	{% if printer['gcode_macro status_cleaning'] is defined %}
	_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"
	STATUS_CLEANING
	{% endif %}

[gcode_macro _klicky_status_meshing]
gcode = 
	{% if printer['gcode_macro status_meshing'] is defined %}
	_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"
	STATUS_MESHING
	{% endif %}

[gcode_macro _klicky_status_calibrating_z]
gcode = 
	{% if printer['gcode_macro status_calibrating_z'] is defined %}
	_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"
	STATUS_CALIBRATING_Z
	{% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
description = Perform Mesh Bed Leveling with klicky automount
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Bed Mesh Calibrate") }
	{% endif %}
	
	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_MESHING
	
	_BED_MESH_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	
	Dock_Probe

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = _QUAD_GANTRY_LEVEL
description = Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("QG Level") }
	{% endif %}
	
	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_LEVELING
	
	_QUAD_GANTRY_LEVEL {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	G28
	QUAD_GANTRY_LEVEL
	G28
	
	
	
	
	
	
	
	
	
	G0 X175 Y175 Z30 F3600
	
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	G32
	G90
	G1 Z20 F3000
	QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 310,310
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
algorithm = bicubic
relative_reference_index = 24

[mcu rpi]
serial = /tmp/klipper_host_mcu

[adxl345]
cs_pin = rpi:None

[resonance_tester]
accel_chip = adxl345
probe_points = 
	175, 175, 20

[input_shaper]
shaper_freq_x = 64.8
shaper_type_x = 2hump_ei
shaper_freq_y = 40.
shaper_type_y = mzv

[bed_mesh test2]
version = 1
points = 
	-0.031250, -0.028750, -0.006250, -0.007500, -0.021250, -0.037500, -0.027500
	-0.030000, -0.031250, -0.013750, -0.008750, -0.030000, -0.042500, -0.032500
	-0.030000, -0.028750, -0.010000, -0.006250, -0.023750, -0.038750, -0.027500
	-0.010000, -0.011250, -0.000000, 0.000000, -0.011250, -0.023750, -0.013750
	-0.018750, -0.023750, -0.010000, -0.007500, -0.022500, -0.036250, -0.030000
	-0.027500, -0.026250, -0.022500, -0.016250, -0.027500, -0.037500, -0.032500
	-0.040000, -0.036250, -0.031250, -0.021250, -0.028750, -0.042500, -0.038750
x_count = 7
y_count = 7
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 40.0
max_x = 310.0
min_y = 40.0
max_y = 310.0

[bed_mesh default]
version = 1
points = 
	-0.123750, -0.121250, -0.101250, -0.096250, -0.113750, -0.127500, -0.120000
	-0.097500, -0.093750, -0.081250, -0.080000, -0.100000, -0.117500, -0.110000
	-0.080000, -0.072500, -0.056250, -0.045000, -0.072500, -0.081250, -0.071250
	-0.026250, -0.023750, -0.013750, 0.000000, -0.027500, -0.048750, -0.048750
	-0.042500, -0.038750, -0.020000, -0.015000, -0.027500, -0.040000, -0.040000
	-0.038750, -0.041250, -0.033750, -0.026250, -0.038750, -0.052500, -0.046250
	-0.042500, -0.058750, -0.046250, -0.035000, -0.043750, -0.051250, -0.043750
x_count = 7
y_count = 7
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 40.0
max_x = 310.0
min_y = 40.0
max_y = 310.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548228313152: New connection
Loaded MCU 'mcu' 117 commands (v0.11.0-121-ga5fb2076 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_sdio=PC12,PD2,PC8,PC9,PC10,PC11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 CLOCK_FREQ=180000000 MCU=stm32f446xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'rpi': Starting connect
webhooks client 548228313152: Client info {'program': 'Moonraker', 'version': 'v0.8.0-29-g80920dd'}
mcu 'rpi': got {'count': 130, 'sum': 256934, 'sumsq': 3055780, '#name': 'stats', '#sent_time': 30.968895769, '#receive_time': 31.000352592}
Loaded MCU 'rpi' 111 commands (v0.11.0-121-ga5fb2076 / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'rpi' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'rpi' printer configuration...
Configured MCU 'rpi' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (40.0, 20.2)    | (40.0, 40.0)
  1   | (85.0, 20.2)    | (85.0, 40.0)
  2   | (130.0, 20.2)   | (130.0, 40.0)
  3   | (175.0, 20.2)   | (175.0, 40.0)
  4   | (220.0, 20.2)   | (220.0, 40.0)
  5   | (265.0, 20.2)   | (265.0, 40.0)
  6   | (310.0, 20.2)   | (310.0, 40.0)
  7   | (310.0, 65.2)   | (310.0, 85.0)
  8   | (265.0, 65.2)   | (265.0, 85.0)
  9   | (220.0, 65.2)   | (220.0, 85.0)
  10  | (175.0, 65.2)   | (175.0, 85.0)
  11  | (130.0, 65.2)   | (130.0, 85.0)
  12  | (85.0, 65.2)    | (85.0, 85.0)
  13  | (40.0, 65.2)    | (40.0, 85.0)
  14  | (40.0, 110.2)   | (40.0, 130.0)
  15  | (85.0, 110.2)   | (85.0, 130.0)
  16  | (130.0, 110.2)  | (130.0, 130.0)
  17  | (175.0, 110.2)  | (175.0, 130.0)
  18  | (220.0, 110.2)  | (220.0, 130.0)
  19  | (265.0, 110.2)  | (265.0, 130.0)
  20  | (310.0, 110.2)  | (310.0, 130.0)
  21  | (310.0, 155.2)  | (310.0, 175.0)
  22  | (265.0, 155.2)  | (265.0, 175.0)
  23  | (220.0, 155.2)  | (220.0, 175.0)
  24  | (175.0, 155.2)  | (175.0, 175.0)
  25  | (130.0, 155.2)  | (130.0, 175.0)
  26  | (85.0, 155.2)   | (85.0, 175.0)
  27  | (40.0, 155.2)   | (40.0, 175.0)
  28  | (40.0, 200.2)   | (40.0, 220.0)
  29  | (85.0, 200.2)   | (85.0, 220.0)
  30  | (130.0, 200.2)  | (130.0, 220.0)
  31  | (175.0, 200.2)  | (175.0, 220.0)
  32  | (220.0, 200.2)  | (220.0, 220.0)
  33  | (265.0, 200.2)  | (265.0, 220.0)
  34  | (310.0, 200.2)  | (310.0, 220.0)
  35  | (310.0, 245.2)  | (310.0, 265.0)
  36  | (265.0, 245.2)  | (265.0, 265.0)
  37  | (220.0, 245.2)  | (220.0, 265.0)
  38  | (175.0, 245.2)  | (175.0, 265.0)
  39  | (130.0, 245.2)  | (130.0, 265.0)
  40  | (85.0, 245.2)   | (85.0, 265.0)
  41  | (40.0, 245.2)   | (40.0, 265.0)
  42  | (40.0, 290.2)   | (40.0, 310.0)
  43  | (85.0, 290.2)   | (85.0, 310.0)
  44  | (130.0, 290.2)  | (130.0, 310.0)
  45  | (175.0, 290.2)  | (175.0, 310.0)
  46  | (220.0, 290.2)  | (220.0, 310.0)
  47  | (265.0, 290.2)  | (265.0, 310.0)
  48  | (310.0, 290.2)  | (310.0, 310.0)
bed_mesh: relative_reference_index 24 is (175.00, 175.00)
Starting heater checks for extruder
Stats 32.0: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000008 mcu_task_stddev=0.000008 bytes_write=3341 bytes_read=6753 bytes_retransmit=9 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=3152 freq=179997761 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=826 bytes_read=4478 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49991544 adj=49991781  heater_bed: target=0 temp=0.0 pwm=0.000 sysload=1.57 cputime=5.706 memavail=694356 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 548228313152
webhooks: registering remote method 'reboot_machine' for connection id: 548228313152
webhooks: registering remote method 'pause_job_queue' for connection id: 548228313152
webhooks: registering remote method 'start_job_queue' for connection id: 548228313152
Stats 33.0: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000008 mcu_task_stddev=0.000008 bytes_write=6799 bytes_read=7069 bytes_retransmit=9 bytes_invalid=0 send_seq=342 receive_seq=342 retransmit_seq=2 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=179999348 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=832 bytes_read=4494 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49995314 adj=49992416  heater_bed: target=0 temp=0.0 pwm=0.000 sysload=1.57 cputime=5.746 memavail=694360 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
Stats 34.0: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000008 mcu_task_stddev=0.000008 bytes_write=6944 bytes_read=7205 bytes_retransmit=9 bytes_invalid=0 send_seq=347 receive_seq=347 retransmit_seq=2 srtt=0.002 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180000116 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=838 bytes_read=4510 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999219 adj=49997261  heater_bed: target=0 temp=16.8 pwm=0.000 sysload=1.57 cputime=5.767 memavail=694360 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 35.0: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000008 mcu_task_stddev=0.000008 bytes_write=6950 bytes_read=7326 bytes_retransmit=9 bytes_invalid=0 send_seq=348 receive_seq=348 retransmit_seq=2 srtt=0.002 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180000571 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=844 bytes_read=4526 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49998836 adj=50003206  heater_bed: target=0 temp=16.8 pwm=0.000 sysload=1.57 cputime=5.784 memavail=694360 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 36.0: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000008 mcu_task_stddev=0.000008 bytes_write=6956 bytes_read=7447 bytes_retransmit=9 bytes_invalid=0 send_seq=349 receive_seq=349 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180000626 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=850 bytes_read=4542 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49998938 adj=50001183  heater_bed: target=0 temp=16.8 pwm=0.000 sysload=1.45 cputime=5.801 memavail=694360 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 37.0: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000038 mcu_task_stddev=0.000063 bytes_write=6962 bytes_read=7569 bytes_retransmit=9 bytes_invalid=0 send_seq=350 receive_seq=350 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001324 rpi: mcu_awake=0.001 mcu_task_avg=0.000018 mcu_task_stddev=0.000031 bytes_write=856 bytes_read=4571 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=50000211 adj=49999350  heater_bed: target=0 temp=16.8 pwm=0.000 sysload=1.45 cputime=5.823 memavail=687580 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 38.0: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000038 mcu_task_stddev=0.000063 bytes_write=6968 bytes_read=7690 bytes_retransmit=9 bytes_invalid=0 send_seq=351 receive_seq=351 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001445 rpi: mcu_awake=0.001 mcu_task_avg=0.000018 mcu_task_stddev=0.000031 bytes_write=862 bytes_read=4587 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=50000081 adj=50001827  heater_bed: target=0 temp=16.7 pwm=0.000 sysload=1.45 cputime=5.841 memavail=687012 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 39.0: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000038 mcu_task_stddev=0.000063 bytes_write=6974 bytes_read=7811 bytes_retransmit=9 bytes_invalid=0 send_seq=352 receive_seq=352 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001424 rpi: mcu_awake=0.001 mcu_task_avg=0.000018 mcu_task_stddev=0.000031 bytes_write=868 bytes_read=4603 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=50000046 adj=50000885  heater_bed: target=0 temp=16.8 pwm=0.000 sysload=1.45 cputime=5.865 memavail=690288 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 40.0: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000038 mcu_task_stddev=0.000063 bytes_write=6980 bytes_read=7917 bytes_retransmit=9 bytes_invalid=0 send_seq=353 receive_seq=353 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001321 rpi: mcu_awake=0.001 mcu_task_avg=0.000018 mcu_task_stddev=0.000031 bytes_write=874 bytes_read=4619 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999877 adj=50000498  heater_bed: target=0 temp=16.8 pwm=0.000 sysload=1.45 cputime=5.884 memavail=691444 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 41.0: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000038 mcu_task_stddev=0.000063 bytes_write=6986 bytes_read=8038 bytes_retransmit=9 bytes_invalid=0 send_seq=354 receive_seq=354 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001336 rpi: mcu_awake=0.001 mcu_task_avg=0.000018 mcu_task_stddev=0.000031 bytes_write=880 bytes_read=4635 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999813 adj=49999988  heater_bed: target=0 temp=16.7 pwm=0.000 sysload=1.33 cputime=5.901 memavail=691220 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 42.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=6992 bytes_read=8173 bytes_retransmit=9 bytes_invalid=0 send_seq=355 receive_seq=355 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001316 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000015 bytes_write=886 bytes_read=4664 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999741 adj=49999639  heater_bed: target=0 temp=16.7 pwm=0.000 sysload=1.33 cputime=5.918 memavail=691220 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 43.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=6998 bytes_read=8279 bytes_retransmit=9 bytes_invalid=0 send_seq=356 receive_seq=356 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001411 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000015 bytes_write=892 bytes_read=4680 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999733 adj=49999463  heater_bed: target=0 temp=16.7 pwm=0.000 sysload=1.33 cputime=5.941 memavail=691220 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 44.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7004 bytes_read=8399 bytes_retransmit=9 bytes_invalid=0 send_seq=357 receive_seq=357 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001585 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000015 bytes_write=898 bytes_read=4696 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999831 adj=49999306  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.33 cputime=5.973 memavail=691220 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 45.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7010 bytes_read=8512 bytes_retransmit=9 bytes_invalid=0 send_seq=358 receive_seq=358 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001580 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000015 bytes_write=904 bytes_read=4712 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999896 adj=49999509  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.33 cputime=6.000 memavail=693500 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 46.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7016 bytes_read=8615 bytes_retransmit=9 bytes_invalid=0 send_seq=359 receive_seq=359 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001591 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000015 bytes_write=910 bytes_read=4728 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999921 adj=49999766  heater_bed: target=0 temp=16.7 pwm=0.000 sysload=1.30 cputime=6.023 memavail=689820 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 47.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7022 bytes_read=8750 bytes_retransmit=9 bytes_invalid=0 send_seq=360 receive_seq=360 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001578 rpi: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000025 bytes_write=916 bytes_read=4757 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999914 adj=49999782  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.30 cputime=6.047 memavail=689868 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 48.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7028 bytes_read=8871 bytes_retransmit=9 bytes_invalid=0 send_seq=361 receive_seq=361 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001563 rpi: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000025 bytes_write=922 bytes_read=4773 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999896 adj=49999692  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.30 cputime=6.065 memavail=690744 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 49.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7034 bytes_read=8977 bytes_retransmit=9 bytes_invalid=0 send_seq=362 receive_seq=362 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001665 rpi: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000025 bytes_write=928 bytes_read=4789 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999875 adj=49999570  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.30 cputime=6.082 memavail=690500 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 50.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7040 bytes_read=9098 bytes_retransmit=9 bytes_invalid=0 send_seq=363 receive_seq=363 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001718 rpi: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000025 bytes_write=934 bytes_read=4805 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999858 adj=49999293  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.30 cputime=6.109 memavail=690528 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 51.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7046 bytes_read=9219 bytes_retransmit=9 bytes_invalid=0 send_seq=364 receive_seq=364 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001735 rpi: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000025 bytes_write=940 bytes_read=4821 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999912 adj=49999150  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.20 cputime=6.141 memavail=690528 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 52.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7052 bytes_read=9339 bytes_retransmit=9 bytes_invalid=0 send_seq=365 receive_seq=365 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001768 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000021 bytes_write=946 bytes_read=4850 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999974 adj=49999481  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.20 cputime=6.174 memavail=690528 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 53.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7058 bytes_read=9460 bytes_retransmit=9 bytes_invalid=0 send_seq=366 receive_seq=366 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001755 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000021 bytes_write=952 bytes_read=4866 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=50000029 adj=49999765  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.20 cputime=6.203 memavail=690536 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.0 pwm=0.000
Stats 54.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7064 bytes_read=9581 bytes_retransmit=9 bytes_invalid=0 send_seq=367 receive_seq=367 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001736 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000021 bytes_write=958 bytes_read=4882 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=50000024 adj=50000044  heater_bed: target=0 temp=16.5 pwm=0.000 sysload=1.20 cputime=6.228 memavail=692912 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 55.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7070 bytes_read=9687 bytes_retransmit=9 bytes_invalid=0 send_seq=368 receive_seq=368 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001719 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000021 bytes_write=970 bytes_read=4914 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=50000018 adj=49999917  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.20 cputime=6.251 memavail=690368 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 56.0: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000005 mcu_task_stddev=0.000004 bytes_write=7076 bytes_read=9808 bytes_retransmit=9 bytes_invalid=0 send_seq=369 receive_seq=369 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=180001683 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000021 bytes_write=976 bytes_read=4930 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999992 adj=49999815  heater_bed: target=0 temp=16.6 pwm=0.000 sysload=1.18 cputime=6.267 memavail=690564 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
